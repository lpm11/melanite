# -*- coding: utf-8 -*-
import sys;
import argparse;
import re;
from colormath.color_objects import sRGBColor;

import functools;
strmap = functools.partial(map, str);

def main():
    parser = argparse.ArgumentParser(description="melanite color scheme applier");
    parser.add_argument("--prefix", metavar="STR", help="prefix for replacement", default=r"@melanite-");
    parser.add_argument("--scheme", metavar="TSV", required=True, help="scheme tsv (generated by melanite-generate.py)");
    parser.add_argument("--exclude-sharp", action="store_true", help="exclude '#' prefix for color code");
    opt = parser.parse_args();

    d = {};
    for line in map(lambda line: line.rstrip("\n"), open(opt.scheme)):
        name, color_s = line.split("\t");
        color = sRGBColor.new_from_rgb_hex(color_s);
        if (opt.exclude_sharp):
            color_s = color_s[1:];
        r, g, b = color.get_upscaled_value_tuple();
        rf, gf, bf = color.get_value_tuple();

        # hexrgb
        d[name] = color_s;
        # int rgb
        d[name+"-r"], d[name+"-g"], d[name+"-b"] = strmap([ r, g, b ]);
        # float rgb (0.0-1.0)
        d[name+"-rf"], d[name+"-gf"], d[name+"-bf"] = strmap([ rf, gf, bf ]);
        # float rgb (0.0-100.0)
        d[name+"-r%"], d[name+"-g%"], d[name+"-b%"] = strmap([ rf*100, gf*100, bf*100 ]);
        # int rgb array
        d[name+"[]"] = "[ {}, {}, {} ]".format(r, g, b);

    re_melanite = re.compile(re.escape(opt.prefix) + r"([\-\w]+(?:-[rgb]|-[rgb]f|-[rgb]%|\[\])?)");
    for line in map(lambda line: line.rstrip("\n"), sys.stdin):
        line = re_melanite.sub(lambda m: d[m.group(1)], line);
        print(line);

    sys.exit(0);

if (__name__=="__main__"):
    main();
